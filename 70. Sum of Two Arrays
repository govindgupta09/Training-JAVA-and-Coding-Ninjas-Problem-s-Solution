Sum of Two Arrays

Two random integer arrays/lists have been given as ARR1 and ARR2 of size N and M respectively. Both the arrays/lists contain numbers from 0 to 9(i.e. single digit integer is present at every index). The idea here is to represent each array/list as an integer in itself of digits N and M.
You need to find the sum of both the input arrays/list treating them as two integers and put the result in another array/list i.e. output array/list will also contain only single digit at every index.
Note:
The sizes N and M can be different. 

Output array/list(of all 0s) has been provided as a function argument. Its size will always be one more than the size of the bigger array/list. Place 0 at the 0th index if there is no carry. 

No need to print the elements of the output array/list.
Using the function "sumOfTwoArrays", write the solution to the problem and store the answer inside this output array/list. The main code will handle the printing of the output on its own.


===================================================================================================================================================================================================================


public class Solution {

    public static void sumOfTwoArrays(int arr1[], int arr2[], int output[]) {
    	int carry = 0,k,i,j;
        int m=arr1.length;
        int n=arr2.length;
		if(m>n){
            i = m-1;
            j = n-1;
		    while(i>=0 && j>=0){
                output[i + 1] = (arr1[i] + arr2[j] + carry) % 10;
                carry = (arr1[i] + arr2[j] + carry)/10;
				i--;
				j--;
			}
			for(k=i+1;k>0 && i>=0;k--){
                output[k] = (arr1[i] + carry) % 10;
				carry = (arr1[i] + carry) / 10;
	            i--;
			} 
			output[0] = carry;
		}
		else
        {
            i=m-1;
            j=n-1;
			while(i>=0 && j>=0){
                output[j + 1] = (arr1[i] + arr2[j] + carry) % 10;
				carry = (arr1[i] + arr2[j] + carry)/10;
				i--;
				j--;
			}
			for(k=j+1;k>0 && j>=0;k--){
                output[k] = (arr2[j] + carry) % 10;
				carry = (arr2[j] + carry) / 10;
	            j--;
			}
			output[0] = carry;
		}
    }
}


